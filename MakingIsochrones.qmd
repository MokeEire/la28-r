---
title: "Making Isochrones"
format: html
---

Documentation:

- [Github](https://github.com/traveltime-dev/traveltime-sdk-r)
- [Routes](https://playground.traveltime.com/routes)
- [Isochrones](https://docs.traveltime.com/api/overview/isochrones)

# Plan

Generate map of places in LA you can travel to each venue within different time frames:

- 30 mins, 1hr, and 1.5hrs
- via car and via public transport
- at 8am and 11am on a Weekday

```{r setup}
library(here)
library(tidyverse)
library(sf)
library(traveltimeR)
library(jsonlite)

# Load custom functions
source(here("R", "fct-traveltime.R"))
```

# Data

## Census Tracts


```{r}
# 2020 population by census tract from: https://www.nhgis.org/
nhgis_file = here("data", "nhgis", "nhgis0001_ds258_2020_tract.csv")

nhgis = read_csv(nhgis_file)

nhgis_la = nhgis |> 
  filter(STATE == "California", COUNTY == "Los Angeles County") |> 
  mutate(AREALAND_SQKM = AREALAND/1e6,
         AREALAND_SQMI = AREALAND_SQKM/2.59,
         .after = "AREALAND") |> 
  select(GISJOIN, YEAR, TRACTA, POPULATION = U7H001, AREALAND_SQKM, AREALAND_SQMI)

# Census tract shapefiles
nhgis_shp_file = here("data", "nhgis", "US_tract_2020.shp")

nhgis_shp = st_read(nhgis_shp_file) |> 
  # Reproject CRS to WGS84
  st_transform(crs = "EPSG:4326")

```

Create an opinionated subset of Los Angeles tracts that make up the area of LA where transportation to venues is relevant.

Exclude Catalina Island (tract 5991) and the area north of the San Gabriel Mountains (tract 9304).
Also exclude tracts that are north of the 34.35 latitude: functionally Santa Clarita and above.

```{r}
nhgis_la_shp = inner_join(nhgis_la, nhgis_shp, by = "GISJOIN")

exclude_tracts = tribble(
  ~TRACTCE,
  "599100",
  "599000",
  "930400"
)

nhgis_la_shp_subset = nhgis_la_shp |> 
  anti_join(exclude_tracts, by = "TRACTCE") |> 
  filter(st_coordinates(st_centroid(geometry))[,2] < 34.35) |> 
  st_as_sf()

glimpse(nhgis_la_shp_subset)
```

```{r}
ggplot(nhgis_la_shp_subset)+
  geom_sf(colour = "#333")+
  theme_void()
```

Or census tract by population

```{r}
ggplot(nhgis_la_shp_subset)+
  geom_sf(aes(fill = POPULATION), colour = "#333")+
  scale_fill_continuous(name = "Population", breaks = scales::breaks_pretty(), labels = scales::comma, type = "viridis",
                        guide = guide_colorbar(direction = "horizontal", position = "bottom",
                                               theme = theme(legend.key.width = unit(8, "cm"),
                                                             legend.key.height = unit(.25, "cm"))))+
  theme_void()

```


## Venues

Venues data I compiled: https://docs.google.com/spreadsheets/d/18_P4igWVdnWZpbXPb7ZHEw6vscrD8gNAeu0BfDXmE4k/edit?usp=sharing

I opted to include those that are on the LA28 website.
There might be others that have not been confirmed and the plans seemed to have changed since the 2017 Olympics application documents were written. 


```{r}
venues = read_rds(here("data", "venues_complete.rds"))
```

Some of the venues are at the same address e.g. different stadia in Carson

```{r}
venues_distinct_addresses = distinct(venues, address, .keep_all = T)

venues_distinct_addresses |> 
  ggplot(aes(geometry = venue_geometry)) +
  geom_sf(data = nhgis_la_shp_subset, aes(geometry = geometry), colour = "#333")+
  geom_sf(colour = "blue", size = 3)+
  # geom_sf_text(aes(label = venue), size = 2)+
  theme_void()
```

## Combine the two

Join census tract information to the venues

```{r}
venues_tracts = st_join(venues_distinct_addresses, nhgis_la_shp_subset, join = st_within)

distinct(venues_tracts, TRACTA, .keep_all = T)
```

```{r}
venues_iso = venues_distinct_addresses |> 
  mutate(lat = st_coordinates(venue_geometry)[,2], 
         lng = st_coordinates(venue_geometry)[,1],
         coords = map2(lat, lng, \(lat, lng) list(lat = lat, lng = lng))) |>
  select(id = venue, coords) |> 
  st_drop_geometry()

# Create a combination of venues and travel times for isochrone requests
iso_request_df = venues_iso |> 
  expand_grid(travel_time = 60*c(30, 60, 90))

venues_iso_search = iso_request_df |> 
    pmap(\(id, coords, travel_time) make_search(id = str_c(id, "_", travel_time), 
                                      travel_time = travel_time, 
                                      arrival_time = "2024-12-10T09:00:00-08:00", 
                                      coords = coords, 
                                      transportation = list(type = "public_transport", 
                                                            walking_time=20*60, 
                                                            pt_change_delay = 120),
                                      level_of_detail = list(scale_type = "simple", level = "medium")))
```


```{r}
venues_isochrones = map(venues_iso_search, time_map_sf)

venues_isochrones_df = list_rbind(venues_isochrones, names_to = "id")
```

```{r}
glimpse(venues_isochrones_df)
```


```{r}
isochrone_df = venues_isochrones_df |> 
  # filter(venue == sample(venue, 1)) |> 
  inner_join(venues, by = "venue") |> 
  mutate(travel_time_mins = factor(travel_time/60))|> 
  arrange(desc(travel_time))

isochrone_df |> 
  split(isochrone_df$venue) |> 
  map(\(df){
    # Single venue, 3-tier isochrone
  ggplot(df)+
  geom_sf(data = nhgis_la_shp_subset, aes(geometry=geometry), alpha = .9)+
  geom_sf(aes(geometry= geometry, fill = travel_time_mins), alpha = .8)+
  geom_sf(aes(geometry = venue_geometry), alpha = .5, size = 1)+
  # scale_fill_fermenter(breaks = c(29.999, 59.999, 89.999), labels = ~round(.x, 0), type = "div", palette = 8)+
  # scale_fill_steps2(breaks = c(30, 60, 90), n.breaks = 3, nice.breaks = F)+
  scale_fill_brewer(name = "Mins", type = "div", palette = 8, direction = -1,
                        guide = guide_legend(direction = "horizontal", position = "bottom",
                                               theme = theme(legend.key.width = unit(.75, "cm"), legend.text.position = "bottom",
                                                             legend.key.height = unit(.5, "cm"), legend.title.position = "right")))+
  labs(title = "How long does it take to get to ________ using public transit?",
       subtitle = unique(df$venue),
       caption = "Allows for 20 mins walking to/between transit stops\n\nSource: Traveltime API")+
  theme_void()
  })
  
```




